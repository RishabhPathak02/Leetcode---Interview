//Solution 1 focus here egde case i.e when n == size ;
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode tmp = head;
        int size = 0;
        while (tmp != null) {
            size++;
            tmp = tmp.next;
        }
        if(size == n){
            head = head.next ;
            return head ;
        }
        tmp = head;
        int counter = size - n;
        while (counter-- > 1) {
            tmp = tmp.next;
        }
        tmp.next = tmp.next.next;
        return head;

    }
}
// solution 2
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(-1);
        dummy.next = head ;

        ListNode slow = dummy , fast = dummy ;
        for(int i = 0 ; i<=n ; i++){
            fast = fast.next ;
        }
        while(fast != null){
            slow = slow.next ;
            fast = fast.next ;
        }
        slow.next = slow.next.next ;
        return dummy.next ;
        
    }
}
